#################
# A comprehensive implementation of injecting public keys is available on following URL:
#
#https://github.com/openstack/heat-templates/blob/master/hot/software-config/example-templates/example-ssh-copy-id.yaml
#################

heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

# Declare parameters
parameters:

  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: Ubuntu 16.04 LTS (Xenial Xerus) - latest

  server_image:
    type: string
    label: A Server Image (Faster Startup)
    default: Image to be used for server instance
    default: Group16-Server
    constraints:
      - custom_constraint: glance.image

  worker_image:
    type: string
    label: An worker image (Faster Startup)
    default: Group16-Worker
    constraints:
      - custom_constraint: glance.image

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: ssc.small

  server_flavor:
    type: string
    label: Flavor
    description: Flavor to be used for workers
    default: ssc.small
    constraints:
      - custom_constraint: nova.flavor

  worker_flavor:
    type: string
    label: Flavor
    description: Flavor to be used for workers
    default: ssc.small
    constraints:
      - custom_constraint: nova.flavor

  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: Public External IPv4 network

  node_count:
    type: number
    default: 0
    description: Default number of nodes

  no_image_count:
    type: number
    default: 0
    description: Default number of nodes when no worker image exists

  API_UNAME:
    type: string
    description: Username for SNIC 

  API_PWD:
    type: string
    hidden: true
    description: Password for SNIC

# Resource allocation
resources:
  cluster_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: cluster_sg
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22

  private_network:
    type: OS::Neutron::Net
    properties:
      name: Group16-Cluster

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: 10.10.10.0/24
      dns_nameservers:
        - 130.238.164.6
        - 130.238.4.133
        - 130.238.7.10
        - 130.239.1.90
        - 129.16.1.53

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  server_port:
    type: OS::Neutron::Port
    properties:
      name: "serverPort"
      security_groups:
        - { get_resource: cluster_sg }
        - "Karaboms"
        - "default"
      network_id: {get_resource: private_network}
      fixed_ips: [{"subnet": { get_resource: private_subnet }, "ip_address": 10.10.10.5}]

  worker_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      security_groups:
        - { get_resource: cluster_sg }
        - "Karaboms"
        - "default"

  my_instance0:
    type: OS::Nova::Server
    properties:
      name: "Group16-Server"
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      networks:
        - port: { get_resource: server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            cd /home/ubuntu
            sudo rabbitmq-server -detached

            ### Download Files ###
            sudo rm -rf ./Cloud-Project-Files
            git clone https://github.com/SebastianLindgren/Cloud-Project-Files

            sudo echo "export OS_USERNAME=\"$API_UNAME\"" >> /etc/bash.bashrc
            echo "export OS_PASSWORD=\"$API_PWD\"" >> /etc/bash.bashrc
            echo "export STACK_NAME=\"$STACK_NAME\"" >> /etc/bash.bashrc
            echo "source ./Cloud-Project-Files/openstack/SET-SNIC.sh" >> /home/ubuntu/.bashrc
          params:
            $API_UNAME: { get_param: API_UNAME }
            $API_PWD: { get_param: API_PWD }
            $STACK_NAME: { get_param: 'OS::stack_name' }

  #my_instance0_legacy:
#  #  type: OS::Nova::Server
#  #  properties:
#  #    name: "Group16-Server"
#  #    image: { get_param: image }
#  #    flavor: { get_param: flavor }
#  #    networks:
#  #      - port: { get_resource: server_port }
#  #    user_data: |
#  #      #cloud-config
#
#  #      apt_update: true
#  #      apt_upgrade: true
#  #      packages:
#  #       - python-dev
#  #       - python3-pip
#  #       - build-essential
#  #       - rabbitmq-server
#  #       - systemd
#  #       - python3-openstackclient
#  #       - python3-heatclient
#  #      byobu_default: system
#
  #      ssh_authorized_keys:
  #       - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDD7hh/gaxxHixzmaosN7GNXETT8qd6AY1yDkZxco2mSsylsHUf86gGLMNzqqoZs7MnlJb4fpyRhFX3kWNyMYHWdxLr21fm8V1qpkkLvSJ9qX5QXpjnyRUuKZtBRIiQANVd42fMJbxU2gnL3mJtqimy2Enyy5MEsghFVtlGuYsrs13MitGOZmorokNQlarHcwih4iC22n6K34mk4FErx2shIj+hoH7yhzsqWsmJNzJslVdsXQqwxKzcpDQq9XYxYyccWUZZcYjo+P4fBwNY/hqkVhsq+UCSbD7xydnVAu87QoTATKeg8krvxRzClXgMfoQ/uEZcmphgAx6BT8v3M4Ep karabom@karaboms-Laptop
  #       - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwMjRlsV+aRfJye2jJB28W56GCVmjpDtrw7u+LCCKe4997Oh0KYdPvX/ZYtYmsdyt1Z8S+qiONqLt8NrvANo9fC3975k1D0NdPH3bkj3VyuuyKFnBjY2PQnOvmHtN4JZ6/ynn/wnHOagQg6Vtfd9OLgIP30ufig+3x2Do5EytFVyxyURHqPBeWRmrC2F6oqcVRaxezUoCur/mXOxwRwVYFmc+VMebGwyC95FDXN3WL2yeaTMweW3dyI5HMNdY/0c7ibjAVnsj82i/EnjEzdqnPfqV3IQuw5KEyOKbTkrW0/7pmviV6SAu6TL5FvZYVm7Gj9Z9BDNRaMM21y7hURgg9 Generated-by-Nova
  #       - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXbYbH/tDyI7snDMSNNnIHsfZHdvCfeQTUo2uHhvINWpBkkJdteq73hnsHPvynVDSf9Gas9bLCMp5TXLfMwApW2nNb3TNOV1cJ7LFuudkGm0ZL5xmxce77ALyW5mVk+AC4q/ulgSCx1eAyPukv2v17bB9YnQI1jzRIrORKqwUArAg5mkHje41C6sS1ie1RfkrfGQzQypOdaOwNKCQjDTj7wFPid8UfhCWDiFypCM5Y2NT1lopDyK5Doikon9qf3vhJcOTywwjcPmMBHh/4fDX3uRWnUV4eKmZVLx5HxZyvyLlRcNSIj8BP8JoKh38W4kyEDYn2lZYHfXkLX0s4GMoX Generated-by-Nova
  #       - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDkxGKojxVde3u3G50DKRI5pvWq3KikSgxuV+nj9bfzXGqMJzSvMZBUjWY7iTAeOzmxQB/B+nbJW1SMwIUh9fksL7PuFv1ZtsPqnw1861S4hcxwfRhOpWI5TpOrY3k/lAkoYfMAEe9gLQ2et9sIXew8MbFymQ9o6J4MoMx7Bn8sJ2ed19L+uuKY86Ai//eVyQo0r/LImsGCxTPLTpRubarIFfTFfynkS01t/33dwrwxN3az4WpNIuL3oUZE6h0uxEpsyGCqKvaO8rUTCPNJquj4d4Z5LIIX2KNyPBrZcAFtsONPZsGZt3FxISRec5dAFG+lUp2PGs+0BNvflYy6vX8N alba6827@atterbom
  #       - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCoYJ44o4KuyCHUHebviFhcj0tLGshy96qo/Ct8EBe7jgUeSbQ7DxAUpQyxPMiH3JPgPF4klSoA4SEPyvHu5+RVaIzSgMvt2GIEVDxq0FHWMJwce8o2Vbz0862oCB6uUHXVcGly9DJszOuycmBIbMe6Glh4+FFHtxdalhfNOlvLWKcNLbo+UpmHVTUSsoID2e3mXbRSZDAmEn2N+D9Ite6E+v9u95gBSHpEApw4AbWjzUPL5fZ0KS8XewDaSPp3KUoLt30BAiU10zjJCCZ8NaD0ZZQY3RCfY8JLxzBfNUp9+FMFAu4pNSxL0B67XTl2u8o04lSL/x+6xUruYJ3eU0lH ubuntu@accv
  #      runcmd:
  #       - sudo apt install python3-pip
  #       - sudo pip3 install flask
  #       - export LC_ALL="en_US.UTF-8"
  #       - export LC_CTYPE="en_US.UTF-8"
  #       - sudo pip3 install celery
  #       - sudo pip3 install -U termplotlib
  #       - sudo chmod 777 /var/lib/rabbitmq/.erlang.cookie
  #       - sudo echo "karabom" > /var/lib/rabbitmq/.erlang.cookie
#  #       - sudo chmod 400 /var/lib/rabbitmq/.erlang.cookie
#  #       - cd home/ubuntu
#  #       - sudo mkdir workerApp
#  #       - sudo chown ubuntu:ubuntu workerApp
#  #       - cd workerApp
#  #       - sudo kill -9 `sudo lsof -t -i:25672`
#  #       - sudo rabbitmq-server -detached
#  #       - sudo rabbitmqctl add_user karabom herpderp
#  #       - sudo rabbitmqctl add_vhost karabomhost
#  #       - sudo rabbitmqctl set_user_tags karabom administrator
#  #       - sudo rabbitmqctl set_permissions -p karabomhost karabom ".*" ".*" ".*"
#  #       - sudo rabbitmqctl delete_user guest
#
#  #       # Setup Openstack
#         - cd /home/ubuntu && git clone https://github.com/SebastianLindgren/Cloud-Project-Files
#
#  #       # Fix by hand on server side below command
#  #       #- source /home/ubuntu/Cloud-Project-Files/SNIC.sh 
  #    user_data_format: RAW

  workers:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: node_count }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: Group16_Worker_-%index%
          flavor: { get_param: worker_flavor }
          image: { get_param: worker_image }
          networks: 
            - network: { get_resource: private_network }
          security_groups:
            - { get_resource: cluster_sg }
            - "Karaboms"
            - "default"
          user_data: |
            #!/bin/bash
            cd /home/ubuntu
            sudo docker start worker-docker

  workers_init:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: no_image_count }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: group16_worker_init_-%index%
          flavor: { get_param: flavor }
          image: { get_param: image }
          #key_name: { get_param: key }
          networks:
            - network: { get_resource: private_network }
          security_groups:
            - { get_resource: cluster_sg }
            - "Karaboms"
            - "default"
          user_data: |
            #!/bin/bash
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt install python-dev
            sudo apt-get -y install python3-pip
            sudo apt install build-essential
            sudo apt install rabbitmq-server
            export LC_ALL="en_US.UTF-8"
            export LC_CTYPE="en_US.UTF-8"
            sudo echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDD7hh/gaxxHixzmaosN7GNXETT8qd6AY1yDkZxco2mSsylsHUf86gGLMNzqqoZs7MnlJb4fpyRhFX3kWNyMYHWdxLr21fm8V1qpkkLvSJ9qX5QXpjnyRUuKZtBRIiQANVd42fMJbxU2gnL3mJtqimy2Enyy5MEsghFVtlGuYsrs13MitGOZmorokNQlarHcwih4iC22n6K34mk4FErx2shIj+hoH7yhzsqWsmJNzJslVdsXQqwxKzcpDQq9XYxYyccWUZZcYjo+P4fBwNY/hqkVhsq+UCSbD7xydnVAu87QoTATKeg8krvxRzClXgMfoQ/uEZcmphgAx6BT8v3M4Ep karabom@karaboms-Laptop" >> /home/ubuntu/.ssh/authorized_keys
            sudo echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwMjRlsV+aRfJye2jJB28W56GCVmjpDtrw7u+LCCKe4997Oh0KYdPvX/ZYtYmsdyt1Z8S+qiONqLt8NrvANo9fC3975k1D0NdPH3bkj3VyuuyKFnBjY2PQnOvmHtN4JZ6/ynn/wnHOagQg6Vtfd9OLgIP30ufig+3x2Do5EytFVyxyURHqPBeWRmrC2F6oqcVRaxezUoCur/mXOxwRwVYFmc+VMebGwyC95FDXN3WL2yeaTMweW3dyI5HMNdY/0c7ibjAVnsj82i/EnjEzdqnPfqV3IQuw5KEyOKbTkrW0/7pmviV6SAu6TL5FvZYVm7Gj9Z9BDNRaMM21y7hURgg9 Generated-by-Nova" >> /home/ubuntu/.ssh/authorized_keys
            sudo echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXbYbH/tDyI7snDMSNNnIHsfZHdvCfeQTUo2uHhvINWpBkkJdteq73hnsHPvynVDSf9Gas9bLCMp5TXLfMwApW2nNb3TNOV1cJ7LFuudkGm0ZL5xmxce77ALyW5mVk+AC4q/ulgSCx1eAyPukv2v17bB9YnQI1jzRIrORKqwUArAg5mkHje41C6sS1ie1RfkrfGQzQypOdaOwNKCQjDTj7wFPid8UfhCWDiFypCM5Y2NT1lopDyK5Doikon9qf3vhJcOTywwjcPmMBHh/4fDX3uRWnUV4eKmZVLx5HxZyvyLlRcNSIj8BP8JoKh38W4kyEDYn2lZYHfXkLX0s4GMoX Generated-by-Nova" >> /home/ubuntu/.ssh/authorized_keys
            sudo echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDkxGKojxVde3u3G50DKRI5pvWq3KikSgxuV+nj9bfzXGqMJzSvMZBUjWY7iTAeOzmxQB/B+nbJW1SMwIUh9fksL7PuFv1ZtsPqnw1861S4hcxwfRhOpWI5TpOrY3k/lAkoYfMAEe9gLQ2et9sIXew8MbFymQ9o6J4MoMx7Bn8sJ2ed19L+uuKY86Ai//eVyQo0r/LImsGCxTPLTpRubarIFfTFfynkS01t/33dwrwxN3az4WpNIuL3oUZE6h0uxEpsyGCqKvaO8rUTCPNJquj4d4Z5LIIX2KNyPBrZcAFtsONPZsGZt3FxISRec5dAFG+lUp2PGs+0BNvflYy6vX8N alba6827@atterbom" >> /home/ubuntu/.ssh/authorized_keys
            sudo echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCoYJ44o4KuyCHUHebviFhcj0tLGshy96qo/Ct8EBe7jgUeSbQ7DxAUpQyxPMiH3JPgPF4klSoA4SEPyvHu5+RVaIzSgMvt2GIEVDxq0FHWMJwce8o2Vbz0862oCB6uUHXVcGly9DJszOuycmBIbMe6Glh4+FFHtxdalhfNOlvLWKcNLbo+UpmHVTUSsoID2e3mXbRSZDAmEn2N+D9Ite6E+v9u95gBSHpEApw4AbWjzUPL5fZ0KS8XewDaSPp3KUoLt30BAiU10zjJCCZ8NaD0ZZQY3RCfY8JLxzBfNUp9+FMFAu4pNSxL0B67XTl2u8o04lSL/x+6xUruYJ3eU0lH ubuntu@accv" >> /home/ubuntu/.ssh/authorized_keys
            sudo pip3 install flask
            sudo pip3 install celery
            sudo pip3 install -U termplotlib
            sudo chmod 777 /var/lib/rabbitmq/.erlang.cookie
            sudo echo "karabom" > /var/lib/rabbitmq/.erlang.cookie
            sudo chmod 400 /var/lib/rabbitmq/.erlang.cookie
            sudo kill -9 `sudo lsof -t -i:25672`
            cd home/ubuntu
            sudo mkdir workerApp
            sudo chown ubuntu:ubuntu workerApp

            ### Extra additions Step - 0.5 ###
            sudo mkdir /etc/docker/
            sudo touch /etc/docker/daemon.json
            sudo chmod 777 /etc/docker/daemon.json
            sudo echo -e "{\n\"mtu\": 1400\n}" > /etc/docker/daemon.json
            sudo chmod 400 /etc/docker/daemon.json

            ### Docker Installation Step - 1 ###
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-cache policy docker-ce
            sudo apt-get install -y docker-ce

            # Deploy FEniCS Step - 2
            sudo docker run --name worker-docker -t -d -v $(pwd):/home/fenics/shared -w /home/fenics/shared quay.io/fenicsproject/stable:current
            
            # SOME COMMAND TO GET murtazo on VM Step - 3
            git clone https://github.com/Sprogis/murtazo
            sudo mv ./murtazo/murtazo.tgz ./murtazo.tgz
            sudo rm -rf murtazo

            # Copy Murtazo in container Step - 4 (NOT NECESSARY?)
            # sudo docker cp /home/ubuntu/murtazo/murtazo.tgz worker-docker:/home/fenics/shared/.

            # Ignore Step - 5

            # Extract files in container Step - 6
            sudo docker exec -i worker-docker tar xzvf murtazo.tgz
            sudo docker exec -i worker-docker tar xvf ./murtazo/cloudnaca.tgz -C ./murtazo
            sudo docker exec -i worker-docker tar xvf ./murtazo/navier_stokes_solver.tar -C ./murtazo

            # Installing Navier_Stokes Step - 7/8
            sudo docker exec -i worker-docker sh -c 'cd ./murtazo/navier_stokes_solver/src && ./compile_forms'
            sudo docker exec -i worker-docker sh -c 'cd ./murtazo/navier_stokes_solver && exec cmake .'
            sudo docker exec -i worker-docker sh -c 'cd ./murtazo/navier_stokes_solver && exec make -j 2'

            # Installing Gmesh Step - 9
            sudo docker exec -i worker-docker sh -c 'cd ./murtazo/cloudnaca && exec sudo apt-get update'
            sudo docker exec -i worker-docker sh -c 'cd ./murtazo/cloudnaca && exec sudo apt-get install gmsh'
            sudo docker exec -i worker-docker sh -c 'cd ./murtazo/cloudnaca && exec sudo sed -i "s/GMSHBIN=\"\/Applications\/Gmsh.app\/Contents\/MacOS\/gmsh\"/GMSHBIN=\"\/usr\/bin\/gmsh\"/g" ./runme.sh'
            sudo docker exec -i worker-docker sh -c 'cd ./murtazo/cloudnaca && exec apt install python-numpy'

            # Install pip3 on Docker
            sudo docker exec -i worker-docker sh -c 'cd /home/fenics/shared && exec sudo apt-get install python3-pip'
            sudo docker exec -i worker-docker sh -c 'cd /home/fenics/shared && exec sudo pip3 install -U termplotlib'
            sudo docker exec -i worker-docker sh -c 'cd /home/fenics/shared && exec sudo pip3 install celery'

            # Create gmesh -- THESE steps should be moved to celery worker
            # sudo docker exec -i worker-docker sh -c 'cd ./murtazo/cloudnaca && exec ./runme.sh 0 30 10 200 3'
            # sudo docker exec -i worker-docker sh -c 'cd ./murtazo/cloudnaca/msh && exec dolfin-convert --help'
            # sudo docker exec -i worker-docker sh -c 'cd ./murtazo/navier_stokes_solver && exec ./airfoil  10 0.0001 10. 1 ../cloudnaca/msh/r2a15n200.xml'
          user_data_format: RAW

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: server_port }

# Output in case of successful booting
outputs:
  instance_name:
    description: Name of the instance
    value: { get_attr: [my_instance0, name] }
  instance_ip:
    description: IP address of the instance
    value: { get_attr: [my_instance0, first_address, floating_ip, floating_ip_address] }
